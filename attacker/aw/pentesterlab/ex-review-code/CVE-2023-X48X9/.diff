--- a/backend/src/main/java/org/apache/iotdb/admin/filter/TokenFilter.java
+++ b/backend/src/main/java/org/apache/iotdb/admin/filter/TokenFilter.java
@@ -21,36 +21,29 @@ package org.apache.iotdb.admin.filter;
 
 import org.apache.iotdb.admin.common.exception.BaseException;
 import org.apache.iotdb.admin.common.exception.ErrorCode;
+import org.apache.iotdb.admin.tool.JJwtTool;
 
-import com.auth0.jwt.JWT;
-import com.auth0.jwt.JWTVerifier;
-import com.auth0.jwt.algorithms.Algorithm;
+import io.jsonwebtoken.Claims;
+import org.springframework.util.ObjectUtils;
 import org.springframework.web.servlet.HandlerInterceptor;
 
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import java.net.InetAddress;
-import java.net.UnknownHostException;
-
 public class TokenFilter implements HandlerInterceptor {
   @Override
   public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
       throws BaseException {
-    JWTVerifier jwtVerifier;
-    try {
-      jwtVerifier =
-          JWT.require(Algorithm.HMAC256("IOTDB:" + InetAddress.getLocalHost().getHostAddress()))
-              .build();
-    } catch (UnknownHostException e) {
-      e.printStackTrace();
-      throw new BaseException(ErrorCode.SET_JWT_FAIL, ErrorCode.SET_JWT_FAIL_MSG);
+    String authorization = request.getHeader("Authorization");
+    if (null == authorization || "".equals(authorization)) {
+      throw new BaseException(ErrorCode.TOKEN_ERR, ErrorCode.TOKEN_ERR_MSG);
+    }
+    Claims claimsByToken = JJwtTool.getClaimsByToken(authorization);
+    if (ObjectUtils.isEmpty(claimsByToken)) {
+      throw new BaseException(ErrorCode.TOKEN_ERR, ErrorCode.TOKEN_ERR_MSG);
     }
-    try {
-      String authorization = request.getHeader("Authorization");
-      jwtVerifier.verify(authorization);
-    } catch (Exception e) {
-      e.printStackTrace();
+    Integer userId = claimsByToken.get("userId", Integer.class);
+    if (null == userId) {
       throw new BaseException(ErrorCode.TOKEN_ERR, ErrorCode.TOKEN_ERR_MSG);
     }
     return true;